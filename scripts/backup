#!/bin/bash

function usage() {
    echo "Usage: $0 [-d DIR] [-c [-m 'COMMIT MESSAGE']] [FILE1 [FILE2...]]"
    echo "Saves files (which can be symlinks or directories) to a backup repository."
    echo
    echo "    -d        the backup directory"
    echo "    -c        commits pending changes, including any FILE command line args"
    echo "    -m        commit message, assumes -c"
    echo "    -h        echo this usage text"
    echo
    echo "The backup directory is a git repository."
    echo "When this script is run without -c, the changes are staged but not committed."
    echo "The -c option can be used without any files to commit pre-existing changes."
    echo "In the absence of the -m option, -c will open your editor to enter a commit"
    echo "message, but only if there are actually changes to commit."
    echo "If the -m option exists in the absence of -c, -c is assumed."
    echo "If the -d option is not used, the backup directory falls back first to the"
    echo "BACKUP_DIR environment varialbe, and finally to ~/.backup."
    echo
    echo Examples:
    echo "$0 -d ~/backup -m 'First commit' ~/.vimrc ~/.vim/"
    echo "    backs up vim files and commits non-interactively to ~/backup"
    echo "$0 -c ~/.vimrc ~/.vim"
    echo "    backs up and commits interactively to BACKUP_DIR or ~/.backup"
    echo "$0 ~/.vimrc ~/.vim"
    echo "    backs up and stages changes without committing"
    echo "$0 -c"
    echo "    commits any staged changes interactively"
}

repo=${BACKUP_DIR:-~/.backup}

# Validate arguments
if test $# -eq 0; then
    usage
    exit 1
fi

while getopts ":cd:m:" option; do
    case $option in
        d)
            repo=$OPTARG
            ;;
        c)
            commit=1
            ;;
        m)
            commit=1
            message=$OPTARG
            ;;
        *)
            usage
            exit 1
            ;;
    esac
done

shift `expr $OPTIND - 1`

# It is an error for -d to be the only argument
if test $# -eq 0 && test -z $commit; then
    usage
    exit 1
fi

# Verify all files exist before continuing
for file in "$@"; do
    if test ! -e $file; then
        echo $file does not exist
        echo "Try '$0 -h' for help"
        exit 2
    fi
done


# Ensure repository not taken already
if test -e $repo -a ! -d $repo/.git; then
    echo $repo already exists but is not a git repository.
    echo "Try '$0 -h' for help"
    exit 3
fi

# Initialize repository if necessary
if test ! -d $repo; then
    mkdir $repo
    git init $repo
fi

# Copy files
for file in "$@"; do
    # Don't allow a / at the end of a directory name;
    # otherwise the directory contents get copied instead
    # of the directory itself
    file=`echo $file | sed 's:/$::'`
    cp -LRf $file $repo
done

# Stage files into git index
cd $repo
for file in "$@"; do
    git add `basename $file`
done

# Commit if asked to
if test ! -z $commit; then
    if test -z "$message"; then
        git commit
    else
        git commit -m "$message"
    fi
fi
